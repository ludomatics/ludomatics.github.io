#!/bin/bash

# Build script to generate HTML files from JSON exam files
echo "üöÄ Building exam HTML files..."

# Check if exams directory exists
if [ ! -d "exams" ]; then
    echo "‚ùå No exams directory found"
    exit 1
fi

# Check if templates exist
if [ ! -f "templates/exam-template.html" ]; then
    echo "‚ùå No templates/exam-template.html found to use as template"
    exit 1
fi

if [ ! -f "templates/landing-template.html" ]; then
    echo "‚ùå No templates/landing-template.html found to use as template"
    exit 1
fi

# Clean up old generated files (but keep JSON files)
echo "üßπ Cleaning up old generated files..."
rm -f exams/*.html

# Function to generate landing page
generateLandingPage() {
    # Read the landing template
    local template=$(cat templates/landing-template.html)
    
    # Initialize variables
    local exam_sections=""
    local total_exams=0
    
    # Categorize exams
    local universidad_exams=""
    local bachillerato_exams=""
    local practice_exams=""
    
    # Process each JSON file to build exam sections (including converted YAML files)
    for json_file in exams/*.json; do
        if [ -f "$json_file" ]; then
            local exam_name=$(basename "$json_file" .json)
            
            # Read exam title from JSON
            local title=$(grep '"title"' "$json_file" | head -1 | sed 's/.*"title": *"\([^"]*\)".*/\1/')
            
            # Create exam card HTML
            local exam_card="
                <div class='exam-card'>
                    <h3>$title</h3>
                    <a href='exams/$exam_name.html' class='btn'>Comenzar Examen</a>
                </div>"
            
            # Categorize based on filename
            if [[ "$exam_name" == *"universidad"* ]]; then
                universidad_exams="$universidad_exams$exam_card"
            elif [[ "$exam_name" == *"bachillerato"* ]]; then
                bachillerato_exams="$bachillerato_exams$exam_card"
            else
                practice_exams="$practice_exams$exam_card"
            fi
            
            ((total_exams++))
        fi
    done
    
    # Build exam sections HTML
    if [ -n "$universidad_exams" ]; then
        exam_sections="$exam_sections
        <div class='category'>
            <h2>üéì Ex√°menes Universitarios</h2>
            <div class='exam-grid'>
                $universidad_exams
            </div>
        </div>"
    fi
    
    if [ -n "$bachillerato_exams" ]; then
        exam_sections="$exam_sections
        <div class='category'>
            <h2>üè´ Ex√°menes de Bachillerato</h2>
            <div class='exam-grid'>
                $bachillerato_exams
            </div>
        </div>"
    fi
    
    if [ -n "$practice_exams" ]; then
        exam_sections="$exam_sections
        <div class='category'>
            <h2>üìù Ex√°menes de Pr√°ctica</h2>
            <div class='exam-grid'>
                $practice_exams
            </div>
        </div>"
    fi
    
    # Replace placeholders in template using a file-based approach
    # Write template to temporary file
    echo "$template" > temp_template.html
    
    # Replace placeholders one by one
    sed -i.bak "s/{{TOTAL_EXAMS}}/$total_exams/g" temp_template.html
    
    # Fix CSS path for the generated index.html (change ../index.css to index.css)
    sed -i.bak "s|../index.css|index.css|g" temp_template.html
    
    # For exam sections, we need to handle multiline content carefully
    # Create a temporary file with the exam sections
    echo "$exam_sections" > temp_exam_sections.html
    
    # Use awk to replace the placeholder with file content
    awk '/{{EXAM_SECTIONS}}/ { system("cat temp_exam_sections.html"); next } { print }' temp_template.html > temp_final.html
    
    local generated_content=$(cat temp_final.html)
    
    # Clean up temporary files
    rm temp_template.html temp_template.html.bak temp_exam_sections.html temp_final.html
    
    # Add auto-generated comment at the top
    cat > index.html << EOF
<!-- AUTO-GENERATED FILE - DO NOT MODIFY MANUALLY -->
<!-- Generated by build-exam.sh script on $(date) -->
<!-- Landing page with all available exams -->

$generated_content
EOF
    
    echo "‚úÖ Generated: index.html (landing page)"
}

# Counter for generated files
generated_count=0

# First, convert YAML files to JSON (if any)
echo "üîÑ Converting YAML files to JSON..."
for yaml_file in exams/*.yaml; do
    if [ -f "$yaml_file" ]; then
        echo "üìù Converting: $(basename "$yaml_file")"
        python3 yaml_to_json.py "$yaml_file"
    fi
done

# Process each JSON file in exams directory (including converted ones)
for json_file in exams/*.json; do
    if [ -f "$json_file" ]; then
        # Extract filename without path and extension
        exam_name=$(basename "$json_file" .json)
        
        # Create HTML filename in exams directory
        html_file="exams/${exam_name}.html"
        
        echo "üìù Processing: $exam_name"
        
        # Copy template to new file
        cp templates/exam-template.html "$html_file"
        
        # Add auto-generated comment at the top
        sed -i.bak "1i\\
<!-- AUTO-GENERATED FILE - DO NOT MODIFY MANUALLY -->\\
<!-- Generated by build-exam.sh script on $(date) -->\\
<!-- Source: $exam_name.yaml -->\\
" "$html_file"

        # Embed exam data directly in the HTML file
        python3 embed_exam_data.py "$json_file" "$html_file"
        
        # Remove backup file
        rm "${html_file}.bak"
        
        echo "‚úÖ Generated: $html_file"
        ((generated_count++))
    fi
done

# Generate landing page
echo "üìù Generating landing page..."
generateLandingPage

# Clean up intermediate JSON files that were converted from YAML
echo "üßπ Cleaning up intermediate JSON files..."
for yaml_file in exams/*.yaml; do
    if [ -f "$yaml_file" ]; then
        base_name=$(basename "$yaml_file" .yaml)
        json_file="exams/${base_name}.json"
        if [ -f "$json_file" ]; then
            echo "üóëÔ∏è  Removing intermediate: $json_file"
            rm "$json_file"
        fi
    fi
done

echo ""
echo "üéâ Build completed!"
echo "üìÑ Generated $generated_count HTML files:"
ls -la exams/*.html
echo "üìÑ Generated landing page: index.html" 
